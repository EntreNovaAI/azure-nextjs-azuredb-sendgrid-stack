#!/usr/bin/env bash
#
# Azure Role Assignment Script
#
# Purpose:
#   Assign necessary Azure RBAC roles for Container App managed identity
#   This script is separated from infrastructure deployment because role
#   assignments require elevated permissions (Owner or User Access Administrator)
#
# Usage:
#   bash scripts/deploy/01b_assign_roles.sh [--yes] [--subscription <id>]
#
# Options:
#   --yes             Auto-confirm prompts (non-interactive mode)
#   --subscription    Azure subscription ID (optional)
#
# Prerequisites:
#   - Run 01_deploy_infrastructure.sh first
#   - .env.production file must exist
#   - User must have Owner or User Access Administrator role
#

set -euo pipefail

# ============================================================================
# Change to Project Root Directory
# ============================================================================

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# Change to project root (two levels up from scripts/deploy/)
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
cd "$PROJECT_ROOT"

# ============================================================================
# Configuration
# ============================================================================

ENV_FILE=".env.production"

# Role Definition IDs (these are the same across all Azure subscriptions)
# AcrPull: Pull images from Azure Container Registry
ACR_PULL_ROLE_ID="7f951dda-4ed3-4680-a7ca-43fe172d538d"
# Key Vault Secrets User: Read secrets from Key Vault
KV_SECRETS_USER_ROLE_ID="4633458b-17de-408a-b874-0445c86b69e6"

# ============================================================================
# Parse Arguments
# ============================================================================

AUTO_YES=false
SUBSCRIPTION_ID=""

while [ $# -gt 0 ]; do
  case "$1" in
    --yes)
      AUTO_YES=true
      shift
      ;;
    --subscription)
      SUBSCRIPTION_ID="$2"
      shift 2
      ;;
    *)
      printf "Unknown option: %s\n" "$1"
      printf "Usage: %s [--yes] [--subscription <id>]\n" "$0"
      exit 1
      ;;
  esac
done

# ============================================================================
# Utility Functions
# ============================================================================

# Print colored output
print_header() {
  printf "\n"
  printf "============================================================\n"
  printf " %s\n" "$1"
  printf "============================================================\n"
  printf "\n"
}

print_info() {
  printf "ℹ️  %s\n" "$1"
}

print_success() {
  printf "✅ %s\n" "$1"
}

print_error() {
  printf "❌ %s\n" "$1" >&2
}

print_warning() {
  printf "⚠️  %s\n" "$1"
}

# Confirm action (skip if --yes flag is set)
confirm() {
  if [ "$AUTO_YES" = true ]; then
    return 0
  fi
  
  local prompt="$1"
  local response
  printf "%s (y/n): " "$prompt"
  read -r response
  
  case "$response" in
    [yY]|[yY][eE][sS])
      return 0
      ;;
    *)
      return 1
      ;;
  esac
}

# ============================================================================
# Prerequisites Check
# ============================================================================

check_prerequisites() {
  print_header "Checking Prerequisites"
  
  # Check for Azure CLI
  if ! command -v az >/dev/null 2>&1; then
    print_error "Azure CLI is required but not installed."
    print_info "Install from: https://docs.microsoft.com/cli/azure/install-azure-cli"
    exit 1
  fi
  print_success "Azure CLI is installed"
  
  # Check Azure CLI login status
  if ! az account show >/dev/null 2>&1; then
    print_error "Not logged in to Azure CLI"
    print_info "Run: az login"
    exit 1
  fi
  print_success "Logged in to Azure CLI"
  
  # Check if .env.production exists
  if [ ! -f "$ENV_FILE" ]; then
    print_error "$ENV_FILE not found"
    print_info "Run scripts/deploy/01_deploy_infrastructure.sh first"
    exit 1
  fi
  print_success "$ENV_FILE found"
}

# ============================================================================
# Load Configuration from .env.production
# ============================================================================

load_config() {
  print_header "Loading Configuration"
  
  # Load resource names from .env.production
  # These were generated by 01_deploy_infrastructure.sh
  
  # Read ACR name
  if ! ACR_NAME=$(grep "^ACR_NAME=" "$ENV_FILE" | cut -d '=' -f2); then
    print_error "ACR_NAME not found in $ENV_FILE"
    exit 1
  fi
  
  # Read Key Vault name
  if ! KEY_VAULT_NAME=$(grep "^KEY_VAULT_NAME=" "$ENV_FILE" | cut -d '=' -f2); then
    print_error "KEY_VAULT_NAME not found in $ENV_FILE"
    exit 1
  fi
  
  # Read Container App name
  if ! CONTAINER_APP_NAME=$(grep "^CONTAINER_APP_NAME=" "$ENV_FILE" | cut -d '=' -f2); then
    print_error "CONTAINER_APP_NAME not found in $ENV_FILE"
    exit 1
  fi
  
  print_success "Configuration loaded"
  print_info "ACR Name: $ACR_NAME"
  print_info "Key Vault Name: $KEY_VAULT_NAME"
  print_info "Container App Name: $CONTAINER_APP_NAME"
}

# ============================================================================
# Set Azure Subscription
# ============================================================================

set_subscription() {
  print_header "Azure Subscription"
  
  if [ -n "$SUBSCRIPTION_ID" ]; then
    print_info "Using subscription: $SUBSCRIPTION_ID"
    az account set --subscription "$SUBSCRIPTION_ID"
  else
    # Show current subscription
    CURRENT_SUB=$(az account show --query name -o tsv)
    print_info "Current subscription: $CURRENT_SUB"
    
    # Ask with default to yes (just press Enter to continue)
    printf "Use this subscription? [Y/n]: "
    read -r response
    
    case "$response" in
      [nN]|[nN][oO])
        # User wants to change subscription
        print_info "Available subscriptions:"
        az account list --query "[].{Name:name, ID:id, Default:isDefault}" -o table
        printf "\nEnter subscription ID: "
        read -r SUBSCRIPTION_ID
        az account set --subscription "$SUBSCRIPTION_ID"
        print_success "Switched to subscription: $SUBSCRIPTION_ID"
        ;;
      *)
        # Empty or any other input = yes (default)
        print_success "Using subscription: $CURRENT_SUB"
        ;;
    esac
  fi
}

# ============================================================================
# Get Resource Information
# ============================================================================

get_resource_info() {
  print_header "Retrieving Resource Information"
  
  # Try to get resource group from .env.production first
  RESOURCE_GROUP=$(grep "^RESOURCE_GROUP=" "$ENV_FILE" | cut -d '=' -f2 || true)
  
  if [ -z "$RESOURCE_GROUP" ]; then
    # Fallback: try to get from ACR
    RESOURCE_GROUP=$(az acr show --name "$ACR_NAME" --query resourceGroup -o tsv 2>/dev/null || true)
  fi
  
  if [ -z "$RESOURCE_GROUP" ]; then
    print_error "Could not determine resource group"
    print_info "Make sure you ran 01_deploy_infrastructure.sh successfully"
    exit 1
  fi
  
  print_success "Resource Group: $RESOURCE_GROUP"
  
  # Get managed identity by name (created in Phase 1)
  # Format: {container-app-name}-identity
  IDENTITY_NAME="${CONTAINER_APP_NAME}-identity"
  
  print_info "Looking for managed identity: $IDENTITY_NAME"
  
  PRINCIPAL_ID=$(az identity show \
    --name "$IDENTITY_NAME" \
    --resource-group "$RESOURCE_GROUP" \
    --query principalId \
    -o tsv 2>/dev/null || true)
  
  if [ -z "$PRINCIPAL_ID" ] || [ "$PRINCIPAL_ID" = "null" ]; then
    print_error "Managed identity not found: $IDENTITY_NAME"
    print_info "Make sure you ran 01_deploy_infrastructure.sh successfully"
    print_info "The managed identity should have been created in Phase 1"
    exit 1
  fi
  
  print_success "Managed Identity Principal ID: $PRINCIPAL_ID"
  
  # Get ACR resource ID
  print_info "Retrieving ACR resource ID for: $ACR_NAME (in resource group: $RESOURCE_GROUP)..."
  ACR_ID=$(az acr show --name "$ACR_NAME" --resource-group "$RESOURCE_GROUP" --query id -o tsv 2>&1)
  
  # Check if ACR query failed (e.g., wrong subscription or wrong ACR name)
  if [[ "$ACR_ID" == *"ERROR"* ]] || [[ "$ACR_ID" == *"ResourceGroupNotFound"* ]] || [ -z "$ACR_ID" ]; then
    print_error "Failed to retrieve ACR resource ID"
    print_error "Error: $ACR_ID"
    printf "\n"
    print_warning "Possible causes:"
    printf "\n"
    print_info "1. ACR '$ACR_NAME' doesn't exist in resource group '$RESOURCE_GROUP'"
    print_info "   Check: az acr list --resource-group $RESOURCE_GROUP --query \"[].name\" -o table"
    printf "\n"
    print_info "2. You're in the wrong Azure subscription"
    print_info "   Current subscription:"
    az account show --query "{Name:name, ID:id}" -o table
    printf "\n"
    print_info "   List all subscriptions: az account list -o table"
    print_info "   Switch subscription: az account set --subscription <correct-subscription-id>"
    printf "\n"
    print_info "3. The ACR_NAME in $ENV_FILE is from a previous/different deployment"
    print_info "   Check: grep ACR_NAME $ENV_FILE"
    print_info "   If incorrect, you may need to re-run 01_deploy_infrastructure.sh"
    printf "\n"
    exit 1
  fi
  print_success "ACR Resource ID: $ACR_ID"
  
  # Get Key Vault resource ID
  print_info "Retrieving Key Vault resource ID for: $KEY_VAULT_NAME (in resource group: $RESOURCE_GROUP)..."
  KV_ID=$(az keyvault show --name "$KEY_VAULT_NAME" --resource-group "$RESOURCE_GROUP" --query id -o tsv 2>&1)
  
  # Check if Key Vault query failed
  if [[ "$KV_ID" == *"ERROR"* ]] || [[ "$KV_ID" == *"ResourceGroupNotFound"* ]] || [ -z "$KV_ID" ]; then
    print_error "Failed to retrieve Key Vault resource ID"
    print_error "Error: $KV_ID"
    printf "\n"
    print_warning "Possible causes:"
    printf "\n"
    print_info "1. Key Vault '$KEY_VAULT_NAME' doesn't exist in resource group '$RESOURCE_GROUP'"
    print_info "   Check: az keyvault list --resource-group $RESOURCE_GROUP --query \"[].name\" -o table"
    printf "\n"
    print_info "2. You're in the wrong Azure subscription"
    print_info "   Make sure you're in the same subscription where you ran 01_deploy_infrastructure.sh"
    printf "\n"
    print_info "3. The KEY_VAULT_NAME in $ENV_FILE is from a previous/different deployment"
    print_info "   Check: grep KEY_VAULT_NAME $ENV_FILE"
    print_info "   If incorrect, you may need to re-run 01_deploy_infrastructure.sh"
    printf "\n"
    exit 1
  fi
  print_success "Key Vault Resource ID: $KV_ID"
}

# ============================================================================
# Check Current Permissions
# ============================================================================

check_permissions() {
  print_header "Checking Your Permissions"
  
  # Check if user has permission to assign roles on ACR
  print_info "Checking permissions on ACR..."
  if az role assignment create \
    --role "$ACR_PULL_ROLE_ID" \
    --assignee "$PRINCIPAL_ID" \
    --scope "$ACR_ID" \
    --dry-run 2>/dev/null; then
    print_success "You have permission to assign roles on ACR"
  else
    print_error "You do NOT have permission to assign roles"
    print_warning "Required: Owner or User Access Administrator role"
    printf "\n"
    print_info "Solutions:"
    print_info "1. Ask your Azure admin to grant you Owner role on the resource group"
    print_info "2. Ask your Azure admin to run this script for you"
    print_info "3. Share these commands with your admin:"
    printf "\n"
    printf "   # Assign AcrPull role\n"
    printf "   az role assignment create \\\\\n"
    printf "     --role %s \\\\\n" "$ACR_PULL_ROLE_ID"
    printf "     --assignee %s \\\\\n" "$PRINCIPAL_ID"
    printf "     --scope %s\n" "$ACR_ID"
    printf "\n"
    printf "   # Assign Key Vault Secrets User role\n"
    printf "   az role assignment create \\\\\n"
    printf "     --role %s \\\\\n" "$KV_SECRETS_USER_ROLE_ID"
    printf "     --assignee %s \\\\\n" "$PRINCIPAL_ID"
    printf "     --scope %s\n" "$KV_ID"
    printf "\n"
    exit 1
  fi
}

# ============================================================================
# Assign Roles
# ============================================================================

assign_roles() {
  print_header "Assigning RBAC Roles"
  
  if ! confirm "Proceed with role assignments?"; then
    print_info "Role assignment cancelled by user"
    exit 0
  fi
  
  # Assign AcrPull role
  # Best practice: Use role definition ID instead of role name
  # Best practice: Specify principalType for clarity
  # Best practice: Scope to minimum necessary (ACR resource, not resource group)
  print_info "Assigning AcrPull role on ACR..."
  if az role assignment create \
    --role "$ACR_PULL_ROLE_ID" \
    --assignee "$PRINCIPAL_ID" \
    --assignee-object-id "$PRINCIPAL_ID" \
    --assignee-principal-type ServicePrincipal \
    --scope "$ACR_ID" \
    --output none 2>/dev/null; then
    print_success "AcrPull role assigned"
  else
    print_warning "AcrPull role assignment may already exist (this is fine)"
  fi
  
  # Assign Key Vault Secrets User role
  # Best practice: Use role definition ID instead of role name
  # Best practice: Specify principalType for clarity  
  # Best practice: Scope to minimum necessary (Key Vault resource, not resource group)
  print_info "Assigning Key Vault Secrets User role..."
  if az role assignment create \
    --role "$KV_SECRETS_USER_ROLE_ID" \
    --assignee "$PRINCIPAL_ID" \
    --assignee-object-id "$PRINCIPAL_ID" \
    --assignee-principal-type ServicePrincipal \
    --scope "$KV_ID" \
    --output none 2>/dev/null; then
    print_success "Key Vault Secrets User role assigned"
  else
    print_warning "Key Vault Secrets User role assignment may already exist (this is fine)"
  fi
  
  print_success "All role assignments completed!"
}

# ============================================================================
# Verify Role Assignments
# ============================================================================

verify_roles() {
  print_header "Verifying Role Assignments"
  
  # Check AcrPull role
  print_info "Checking AcrPull role on ACR..."
  if az role assignment list \
    --assignee "$PRINCIPAL_ID" \
    --scope "$ACR_ID" \
    --role "$ACR_PULL_ROLE_ID" \
    --query "[0].roleDefinitionName" \
    -o tsv | grep -q "AcrPull"; then
    print_success "✓ AcrPull role verified"
  else
    print_warning "⚠ AcrPull role not found (may take a few seconds to propagate)"
  fi
  
  # Check Key Vault Secrets User role
  print_info "Checking Key Vault Secrets User role..."
  if az role assignment list \
    --assignee "$PRINCIPAL_ID" \
    --scope "$KV_ID" \
    --role "$KV_SECRETS_USER_ROLE_ID" \
    --query "[0].roleDefinitionName" \
    -o tsv | grep -q "Key Vault Secrets User"; then
    print_success "✓ Key Vault Secrets User role verified"
  else
    print_warning "⚠ Key Vault Secrets User role not found (may take a few seconds to propagate)"
  fi
  
  printf "\n"
  print_info "Role assignments may take 1-2 minutes to fully propagate"
}

# ============================================================================
# Summary
# ============================================================================

show_summary() {
  print_header "Role Assignment Complete!"
  
  printf "✅ Assigned Roles:\n\n"
  printf "  1. AcrPull on %s\n" "$ACR_NAME"
  printf "     → Container App can pull Docker images\n\n"
  printf "  2. Key Vault Secrets User on %s\n" "$KEY_VAULT_NAME"
  printf "     → Container App can read secrets\n\n"
  
  printf "📝 Next Steps:\n\n"
  printf "  1. Wait 1-2 minutes for role propagation\n"
  printf "  2. Continue with: bash scripts/deploy/03_configure_stripe.sh\n"
  printf "\n"
}

# ============================================================================
# Main Script
# ============================================================================

main() {
  print_header "Azure Role Assignment Script"
  
  # Run steps
  check_prerequisites
  load_config
  set_subscription
  get_resource_info
  check_permissions
  assign_roles
  verify_roles
  show_summary
}

# Run main function
main

