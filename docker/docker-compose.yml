# Docker Compose configuration for Azure Next.js Stack
# Modern best practices with BuildKit optimizations
# Run with: docker compose up --build

services:
  # Main Next.js application service
  app:
    # Build configuration with modern optimizations
    build:
      # Build context is the project root (parent directory)
      context: ..
      # Dockerfile location
      dockerfile: ./docker/Dockerfile
      # Build arguments for optimization
      args:
        - NODE_ENV=production
        # Enable BuildKit for better caching and faster builds
        - BUILDKIT_INLINE_CACHE=1
      # Cache configuration for faster rebuilds
      cache_from:
        - azure-nextjs-app:latest
      # Build tags for easy reference
      tags:
        - azure-nextjs-app:latest
        - azure-nextjs-app:${VERSION:-dev}

    # Container name for easy reference and networking
    container_name: azure-nextjs-app

    # Image name for reusability
    image: azure-nextjs-app:latest

    # Port mapping: host:container
    # Access the app at http://localhost:3000
    ports:
      - "3000:3000"

    # Environment variables loaded from .env.production
    # Path is relative to docker-compose.yml location
    env_file:
      - ../.env.production

    # Additional environment variables
    environment:
      - NODE_ENV=production
      - PORT=3000

    # Restart policy for production reliability
    restart: unless-stopped

    # Health check using Node.js (no extra dependencies needed)
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # Resource limits (optional but recommended for production)
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '1'
    #       memory: 1G
    #     reservations:
    #       cpus: '0.5'
    #       memory: 512M
# Optional: Add volumes for persistent data
# volumes:
#   app-data:

# Optional: Custom networks
# networks:
#   app-network:
#     driver: bridge

